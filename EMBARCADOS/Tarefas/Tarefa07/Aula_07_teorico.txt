Data: 30/03/2017

1. Quantos pipes serão criados após as linhas de código a seguir? Por quê?
	(a) int pid;
		int	fd[2];
		pipe(fd);
		pid = fork();


	(b) int pid;
		int	fd[2];
		pid = fork();
		pipe(fd);

Na letra (a), o pipe é criado antes do fork(), ou seja, antes da criação do processo filho! Sabe-se que o pipe é um canal de comunicação, por onde se escreve
e por onde se lê as mensagens de troca entre pai e filho. Quando se cria antes, é criado apenas um pipe pois apenas o processo pai o executa, já que o filho 
ainda não fora criado.

Na letra (b), primeiramente é criado um filho por meio do fork() e, posteriormente, é criado o pipe. Nesse caso, como não foi restringido, o processo filho e o
processo pai executam a criação do pipe, portanto, nesse caso foram criados 2 pipes diferentes.


2. Apresente mais cinco sinais importantes do ambiente Unix, além do SIGSEGV, SIGUSR1, SIGUSR2, SIGALRM e SIGINT. Quais são suas características e utilidades?

>> SIGSYS((12)* Argumento incorreto de uma chamada de sistema.

>> SIGCLD((18) Morte de um filho: enviado ao pai pela terminação de um processo filho.

>> SIGPWR((19) Reativação sobre pane elétrica.

>> SIGFPE((8)* Emitido em caso de erro de cálculo em ponto flutuante, assim como no caso de um número em ponto 
flutuante em formato ilegal. Indica sempre um erro de programação.

>> SIGBUS((10)* Emitido em caso de erro sobre o barramento.

>> SIGIOT((6)* Problemas de instrução de E/S: emitido em caso de problemas de hardware.


3. Considere o código a seguir:

	 1. #include <signal.h>
	 2. #include <unistd.h>
	 3. #include <stdio.h>
	 4. #include <stdlib.h>
	 5.
	 6. void tratamento_alarme(int sig)
	 7. {
	 8. 	system("date");
	 9. 	alarm(1);
	10. }
	11. 
	12. int main()
	13. {
	14. 	signal(SIGALRM, tratamento_alarme);
	15. 	alarm(1);
	16. 	printf("Aperte CTRL+C para acabar:\n");
	17. 	while(1);
	18. 	return 0;
	19. }

Sabendo que a função alarm() tem como entrada a quantidade de segundos para terminar a contagem, quão precisos são os alarmes criados neste código? De onde vem a imprecisão? Este é um método confiável para desenvolver aplicações em tempo real?

A imprecisão da função alarme mora na execução das outras linhas de código! Pois sempre que o alarme manda o sinal SIGALRM, é chamada a função e é executada. Porém, 
para a execução de cada linha de código, existe um tempo. Tal tempo depende da frequência de relógio do processador em questão e a quantidade de linhas que devem ser 
executadas. Portanto, os alarmes são precisos com uma certa quantidade de casas decimais.

Este método é confiável para qualquer aplicação, desde que está não precise de uma rigorosidade no tempo da ordem de 10^-6 s, nessa faixa...