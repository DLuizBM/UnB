Data: 14/03/2017

Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.

	#include <stdio.h>                                                                                       
  2 	#include <stdlib.h>                                                                                      
  3                                                                                                          
  4 	int main(int argc, const char *argv[])                                                                   
  5 	{                                                                                                        
  6     printf("Olá mundo!\n");                                                                              
  7     return 0;                                                                                            
  8 	}



2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Ola Eu
	

	#include <stdio.h>
	#include <stdlib.h>
	int main(int argc, const char *argv[])
	{	
    		char nome[20];

    		printf("Digite seu nome: ");
    		scanf("%s", nome);

    		printf("Ola %s\n\n", nome);
    		return 0;
	}


3. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_1 Eu Mesmo
		
		$Digite seu nome: Nasser Yousef
		$Ola Nasser



	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./ola_usuario_1 "Eu Mesmo"
		
		$Digite seu nome: "Nasser Yousef"
		$ Ola "Nasser

	(c) Se é usado um pipe. Por exemplo:
		$ echo Nasser | ./ola_mundo_usuario
		$ Ola Nasser
		

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Nasser Yousef | ./ola_mundo_usuario
		$Ola Nasser

	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo "Nasser Yousef" | ./ola_mundo_usuario
		$Ola Nasser


	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo mundo cruel! > ola.txt
		$ ./ola_usuario_1 < ola.txt

		$Ola mundo

4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu
	$ Ola Eu
	$
	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, const char *argv[])
	{
    		char nome[50];

    		printf("Ola %s\n", argv[1]);
    		return 0;
	}

	terminal: gcc questao4.c -o questao4

	resultado: ./questao4 Nasser
	Ola Nasser


5. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./questao4 Nasser Yousef
		$Ola Nasser

	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./questao4 "Nasser Yousef"
		$Ola Nasser

	(c) Se é usado um pipe. Por exemplo:
		$ echo Nasser | ./questao4
		$Ola (null)

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Nasser Yousef | ./questao4
		$Ola (null)

	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo "Nasser Yousef" | ./questao4
		$Ola (null)

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./questao4 < ola.txt
		$Ola (null)


6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
	$ ./ola_usuario_3 Eu
	$ Ola Eu
	$ Numero de entradas = 2

	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, const char *argv[])
	{

    	printf("Ola %s\n", argv[1]);
    	printf("Numero de argumentos: %d\n", argc);
    	return 0;
	}

	terminal: gcc questao6.c -o questao6

	resultado: ./questao6 Nasser
	Ola Nasser
	Numero de Argumentos: 2


7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
	$ ./ola_argumentos Eu Mesmo e Minha Pessoa
	$ Argumentos: Eu Mesmo e Minha Pessoa
	$

	#include <stdio.h>
	#include <stdlib.h>
	int i;
	int main(int argc, const char *argv[])
	{
    	printf("Argumentos: ");
    	for(i = 1; i < argc; i++){
        	printf("%s ", argv[i]);
    	}
    	printf("\n");
    	return 0;
	}



8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:

	int Num_Caracs(char *string);

Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

	#include<stdio.h>

	int num_caracs(char *string)
	{
		int i=0;
		while(string[i] != '\0')
			i++;
		return i;
	}
	
	terminal:
	gcc -c num_caracs.c



9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':
	$ ./ola_num_caracs_1 Eu Mesmo
	$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
	$ Argumento: Eu / Numero de caracteres: 2
	$ Argumento: Mesmo / Numero de caracteres: 5
	$

	#include <stdio.h>

	int main(int argc, char *argv[])
	{
		int i;
		for(i=0;i<argc;i++)
			printf("Argumento: %s / Numero de caracteres: %d\n",argv[i], num_caracs(argv[i]));
		return 0;
	}
	
	terminal:
	$gcc num_caracs2.c num_caracs.o
	$./a.out Nasser Yousef Ali
	Argumento: ./a.out / Numero de caracteres: 7
	Argumento: Nasser / Numero de caracteres: 6
	Argumento: Yousef / Numero de caracteres: 6
	Argumento: Ali / Numero de caracteres: 3



10. Crie um Makefile para a questão anterior.

Makefile:
	
	num_caracs:
		gcc -c num_caracs.c
		gcc num_caracs2.c num_caracs.o
		./a.out Nasser Yousef Ali
		
	terminal:
	$make num_caracs
	Argumento: Nasser / Numero de caracteres: 6
	Argumento: Yousef / Numero de caracteres: 6
	Argumento: Ali / Numero de caracteres: 3


11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':
	$ ./ola_num_caracs_2 Eu Mesmo
	$ Total de caracteres de entrada: 25
	$

	#include<stdio.h>

	int main(int argc, char *argv[])
	{
		int i, total=0;
		for(i=0;i<argc;i++)
			total+=num_caracs(argv[i]);
		printf("Total de caracteres de entrada: %d", total);
		return 0;
	}
	
	terminal:
	$gcc num_caracs2.c num_caracs.o
	$./a.out Nasser Yousef Ali
	$Total de caracteres de entrada: 15


12. Crie um Makefileo
vim  para a questão anterior.

	Makefile:
	
	num_caracs:
		gcc -c num_caracs.c
		gcc num_caracs2.c num_caracs.o
		./a.out Nasser Yousef Ali
		
	terminal:
	$make num_caracs
	$Total de caracteres de entrada: 15





